#!/usr/bin/python

"""
Installs a package from a composer.json file from the current working directory.
"""

# Copyright 2013 Shawn Iwinski <shawn.iwinski@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

import json
import os
import sys
import argparse
import shutil
import subprocess



class ComposerInstall:
    RPM_PACKAGE_NAME     = os.environ.get('RPM_PACKAGE_NAME')
    RPM_PACKAGE_VERSION  = os.environ.get('RPM_PACKAGE_VERSION')
    RPM_BUILD_ROOT       = os.environ.get('RPM_BUILD_ROOT')
    RPM_DOC_DIR          = os.environ.get('RPM_DOC_DIR')

    DEFAULT_COMPOSER_DIR = '/usr/share/composer'
    DEFAULT_VENDOR_DIR   = 'vendor'
    DEFAULT_SYS_BIN_DIR  = '/usr/bin'


    def __init__(self):
        self._initArgs()

        if self.args.verbose:
            print 'RPM_PACKAGE_NAME = "%s"' % self.RPM_PACKAGE_NAME
            print 'RPM_PACKAGE_VERSION = "%s"' % self.RPM_PACKAGE_VERSION
            print 'RPM_BUILD_ROOT = "%s"' % self.RPM_BUILD_ROOT
            print 'RPM_DOC_DIR = "%s"' % self.RPM_DOC_DIR
            print self.args

        if not os.path.exists('composer.json'):
            print >> sys.stderr, 'ERROR: Composer install: composer.json not found'
            sys.exit(1)

        self.metadata             = json.load(open('composer.json'))

        self.vendorDir            = None

        self.composerDir          = None
        self.buildrootComposerDir = None

        self.noPackageDir         = self.args.no_package_dir
        self.packageDir           = None
        self.buildrootPackageDir  = None

        self.noBin                = self.args.no_package_dir or not 'bin' in self.metadata or self.args.no_bin
        self.sysBinDir            = None
        self.buildrootSysBinDir   = None

        if not 'name' in self.metadata or not self.metadata['name']:
            print >> sys.stderr, 'ERROR: Composer install: "name" not defined in composer.json'
            sys.exit(1)

        self._initVendorDir()
        self._initComposerDirs()
        self._initPackageDirs()
        self._initBinDirs()

        self._install()


    def _initArgs(self):
        parser = argparse.ArgumentParser(description='Installs a package from a composer.json file from the current working directory.',
                                         epilog="""required environment variables:
  RPM_PACKAGE_NAME      RPM spec %{name} (usually set by rpmbuild)
  RPM_PACKAGE_VERSION   RPM spec %{version} (usually set by rpmbuild)
  RPM_BUILD_ROOT        RPM spec %{buildroot} (usually set by rpmbuild)
  RPM_DOC_DIR           RPM spec %{_docdir} (usually set by rpmbuild)
""", formatter_class=argparse.RawTextHelpFormatter)

        parser.add_argument('-v', '--verbose',
                            action='store_true',
                            dest='verbose',
                            help='verbose output',
                            default=False)

        parser.add_argument('--sys-bin-dir',
                            dest='sys_bin_dir',
                            help='system bin directory (default: "' + self.DEFAULT_SYS_BIN_DIR + '")')

        parser.add_argument('--composer',
                            help='composer executable')

        parser.add_argument('--composer-dir',
                            dest='composer_dir',
                            help='composer directory (default: "' + self.DEFAULT_COMPOSER_DIR + '")')

        parser.add_argument('--php-dir',
                            dest='php_dir',
                            help='PHP directory')

        parser.add_argument('--no-bin',
                            action='store_true',
                            dest='no_bin',
                            help='do not install bin symlinks',
                            default=False)

        parser.add_argument('--no-package-dir',
                            action='store_true',
                            dest='no_package_dir',
                            help='do not install package directory (i.e. "composer-dir/name"; also implies --no-bin)',
                            default=False)

        self.args = parser.parse_args()


    def _initVendorDir(self):
        if 'config' in self.metadata and 'vendor-dir' in self.metadata['config'] and self.metadata['config']['vendor-dir']:
            self.vendorDir = self.metadata['config']['vendor-dir']
        else:
            self.vendorDir = self.DEFAULT_VENDOR_DIR

        if self.args.verbose:
            print 'composer-install: _initVendorDir: vendorDir = "%s"' % self.vendorDir

        if not os.path.isdir(self.vendorDir):
            if os.path.lexists(self.vendorDir):
                os.unlink(self.vendorDir)

            os.makedirs(self.vendorDir, 0755)


    def _initComposerDirs(self):
        #
        # composerDir
        #

        self.composerDir = self.args.composer_dir if self.args.composer_dir else self.DEFAULT_COMPOSER_DIR

        if self.args.verbose:
            print 'composer-install: _installComposerDir: composerDir = "%s"' % self.composerDir

        #
        # buildrootComposerDir
        #

        self.buildrootComposerDir = self.RPM_BUILD_ROOT + self.composerDir

        if self.args.verbose:
            print 'composer-install: _installComposerDir: buildrootComposerDir = "%s"' % self.buildrootComposerDir

        os.makedirs(self.buildrootComposerDir, 0755)


    def _initPackageDirs(self):
        if self.noPackageDir:
            return

        #
        # packageDir
        #

        self.packageDir = os.path.join(self.composerDir, self.metadata['name'])

	if 'target-dir' in self.metadata and self.metadata['target-dir']:
            self.packageDir = os.path.join(self.packageDir, self.metadata['target-dir'])

        if self.args.verbose:
            print 'composer-install: _installPackageDir: packageDir = "%s"' % self.packageDir

        #
        # buildrootPackageDir
        #

        self.buildrootPackageDir = self.RPM_BUILD_ROOT + self.packageDir

        if self.args.verbose:
            print 'composer-install: _installPackageDir: buildrootPackageDir = "%s"' % self.buildrootPackageDir

        os.makedirs(self.buildrootPackageDir, 0755)


    def _initBinDirs(self):
        if self.noBin:
            return

        #
        # sysBinDir
        #

        self.sysBinDir = self.args.sys_bin_dir if self.args.sys_bin_dir else self.DEFAULT_SYS_BIN_DIR

        if self.args.verbose:
            print 'composer-install: _installBin: sysBinDir = "%s"' % self.sysBinDir

        #
        # buildrootSysBinDir
        #

        self.buildrootSysBinDir = self.RPM_BUILD_ROOT + self.sysBinDir

        if self.args.verbose:
            print 'composer-install: _installBin: buildrootSysBinDir = "%s"' % self.buildrootSysBinDir

        os.makedirs(self.buildrootSysBinDir, 0755)


    def _install(self):
        # vendor symlinks
        self._installVendorSymlinks('require')
        self._installVendorSymlinks('require-dev')
        self._installVendorSymlinks('suggest')

        # Set config to use global PHP include path
        subprocess.check_call(self.args.composer + ' --no-ansi config use-include-path true', shell=True)
        # Create auto-load files
        subprocess.check_call(self.args.composer + ' --no-ansi dump-autoload', shell=True)

        if not self.noPackageDir:
            subprocess.check_call('cp -pr * ' + self.buildrootPackageDir, shell=True)

        self._installBin()


    def _installVendorSymlinks(self, packageType):
        if self.args.verbose:
            print 'composer-install: _installVendorSymlinks: packageType = "%s"' % packageType

        if not packageType in self.metadata:
            return

        for package in self.metadata[packageType]:
            if self.args.verbose:
                print 'composer-install: _installVendorSymlinks:     package = "%s"' % package

            # Skip packages like "php", "ext-*", and "lib-*"
            if not '/' in package:
                continue

            vendor, project = package.split('/')

            if self.args.verbose:
                print 'composer-install: _installVendorSymlinks:         package vendor = "%s"' % vendor
                print 'composer-install: _installVendorSymlinks:         package project = "%s"' % project

            # Package vendor directory
            vendorDir = os.path.join(self.vendorDir, vendor)
            if self.args.verbose:
                print 'composer-install: _installVendorSymlinks:         package vendor dir = "%s"' % vendorDir
            if not os.path.isdir(vendorDir):
                if os.path.lexists(vendorDir):
                    os.remove(vendorDir)

                os.makedirs(vendorDir, 0755)

            # Package project directory
            projectDir     = os.path.join(vendorDir, project)
            projectDirReal = os.path.join(self.composerDir, vendor, project)
            if self.args.verbose:
                print 'composer-install: _installVendorSymlinks:         package project dir = "%s"' % projectDir
                print 'composer-install: _installVendorSymlinks:         package project dir real = "%s"' % projectDirReal
            if os.path.lexists(projectDir):
                if os.path.isdir(projectDir):
                    shutil.rmtree(projectDir)
                else:
                    os.remove(projectDir)
            os.symlink(projectDirReal, projectDir)


    def _installBin(self):
        if self.noBin:
            return

        for bin in self.metadata['bin']:
            binSrc     = os.path.join(self.packageDir, bin)
            binSymlink = os.path.join(self.buildrootSysBinDir, os.path.basename(bin))

            if self.args.verbose:
                print 'composer-install: _installBin: bin = "%s"' % bin
                print 'composer-install: _installBin:     src = "%s"' % binSrc
                print 'composer-install: _installBin:     symlink = "%s"' % binSymlink

            os.symlink(binSrc, binSymlink)



if __name__ == '__main__':
    ComposerInstall()
